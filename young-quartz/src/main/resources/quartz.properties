# BEGIN 主配置
# 值可以是任意字符串，并且值本身对调度程序本身没有意义。而是当同一个程序中使用多个实例，它用作客户端代码区分调度程序机制。如果使用集群，则必须为集群中的每个实例在逻辑上相同的Scheduler中使用相同的名称
org.quartz.scheduler.instanceName = scheduler-demo
# 值可以为任意字符串，但是对于所有工作的调度程序来说必须是唯一的，就像它们在集群中是相同的“逻辑”调度程序一样。如果希望为您生成ID，则可以将值“ AUTO”用作instanceId。如果希望该值来自系统属性“ org.quartz.scheduler.instanceId”，则为“ SYS_PROP”。默认值为NON_CLUSTERED
org.quartz.scheduler.instanceId=AUTO
# 仅当org.quartz.scheduler.instanceId设置为“ AUTO”时使用。默认值为org.quartz.simpl.SimpleInstanceIdGenerator。也可以通过实现InstanceIdGenerator来设置自己的实例ID生成规则
org.quartz.scheduler.instanceIdGenerator.class=org.quartz.simpl.SimpleInstanceIdGenerator
# 可以是Java线程的有效名称的任何String。如果未指定此属性，则线程将接收调度程序的名称（“ org.quartz.scheduler.instanceName”）以及附加的字符串“ _QuartzSchedulerThread”。
org.quartz.scheduler.threadName=quartz-simple
# 一个布尔值（“ true”或“ false”），它指定调度程序的主线程是否应该是守护程序线程。另请参见org.quartz.scheduler.makeSchedulerThreadDaemon属性，以调整SimpleThreadPool（如果这是您正在使用的线程池实现）（很可能是这种情况）。
org.quartz.scheduler.makeSchedulerThreadDaemon=false
# 一个布尔值（“ true”或“ false”），它指定Quartz产生的线程是否将继承初始化线程（用于初始化Quartz实例的线程）的上下文ClassLoader。这将影响Quartz主调度线程，JDBCJobStore的失火处理线程（如果使用JDBCJobStore），集群恢复线程（如果使用集群）和SimpleThreadPool中的线程（如果使用SimpleThreadPool）。将此值设置为“ true”可能有助于类加载，JNDI查找以及与在应用程序服务器中使用Quartz相关的其他问题。
org.quartz.scheduler.threadsInheritContextClassLoaderOfInitializer=false
# 是当调度程序空闲时在重新查询可用触发器之前调度程序将等待的时间（以毫秒为单位）。通常，除非您正在使用XA事务，并且在触发应立即触发的触发器延迟时遇到问题，否则您不必“调整”此参数。不建议使用小于5000毫秒的值，因为它将导致过多的数据库查询。小于1000的值不合法。
org.quartz.scheduler.idleWaitTime=30000
# 是调度程序在检测到JobStore内（例如，与数据库的）连接断开时在重试之间等待的时间（以毫秒为单位）。使用RamJobStore时，此参数显然没有太大意义。
org.quartz.scheduler.dbFailureRetryInterval=15000
# 默认为最可靠的方法，即使用“ org.quartz.simpl.CascadingClassLoadHelper”类-该类依次使用所有其他ClassLoadHelper类，直到一个可用为止。尽管应用程序服务器中似乎发生了奇怪的事情，但您可能不应该发现需要为此属性指定任何其他类。当前所有可能的ClassLoadHelper实现都可以在org.quartz.simpl包中找到。
org.quartz.scheduler.classLoadHelper.class=org.quartz.simpl.CascadingClassLoadHelper
#要使用的JobFactory的类名。JobFatcory负责产生JobClasses的实例。默认值为“ org.quartz.simpl.PropertySettingJobFactory”，它每次执行即将执行时，仅在类上调用newInstance（）来生成一个新实例。PropertySettingJobFactory还使用SchedulerContext和Job和Trigger JobDataMaps的内容来反射性地设置作业的bean属性。
org.quartz.scheduler.jobFactory.class=org.quartz.simpl.PropertySettingJobFactory
# 表示将以字符串形式放置在“调度程序上下文”中的名称/值对。（请参阅Scheduler.getContext（））。因此，例如，设置“ org.quartz.context.key.MyKey = MyValue”将执行scheduler.getContext（）。put（“ MyKey”，“ MyValue”）的等效操作。
# 除非您使用JTA事务，否则应将与事务相关的属性保留在配置文件中。
# org.quartz.context.key.SOME_KEY
# 应该设置为Quartz可以在其中找到Application Server的UserTransaction管理器的JNDI URL。默认值（如果未指定）是“ java：comp / UserTransaction”-几乎适用于所有Application Server。Websphere用户可能需要将此属性设置为“ jta / usertransaction”。仅当Quartz配置为使用JobStoreCMT且org.quartz.scheduler.wrapJobExecutionInUserTransaction设置为true时，才使用此选项。
# org.quartz.scheduler.userTransactionURL
# 如果您想让Quartz在调用对您的作业执行execute之前启动UserTransaction，应将其设置为“ true”。Tx将在作业的execute方法完成之后和JobDataMap更新（如果它是StatefulJob）之后提交。默认值为“ false”。您可能还对在作业类上使用@ExecuteInJTATransaction批注感兴趣，该批注可让您控制单个作业是否Quartz应该启动JTA事务-而此属性使它在所有作业中都发生。
# org.quartz.scheduler.wrapJobExecutionInUserTransaction
# 是否跳过运行快速Web请求以确定是否有可供下载的Quartz更新版本。如果运行检查并找到更新，它将在Quartz日志中报告为可用。您还可以使用系统属性“ org.terracotta.quartz.skipUpdateCheck = true”（可以在系统环境中设置，也可以在Java命令行中将其设置为-D）来禁用更新检查。建议您禁用生产部署的更新检查。
org.quartz.scheduler.skipUpdateCheck=false
# 允许调度程序节点一次获取（触发）的最大触发器数。默认值是1。数字越大，触发效率越高（在一次触发很多触发器的情况下）-但代价是群集节点之间的负载可能不平衡。如果此属性的值设置为> 1，并且使用JDBC JobStore，则必须将属性“ org.quartz.jobStore.acquireTriggersWithinLock”设置为“ true”，以避免数据损坏。
org.quartz.scheduler.batchTriggerAcquisitionMaxCount=1
# 允许触发器被捕获并在其计划的触发时间之前触发的时间（以毫秒为单位）。
# 默认值是0。数字越大，触发触发器的批量采集越有可能一次选择并触发1个以上的触发器-代价是未严格遵守触发时间表（触发器可能会提早触发此数量） ）。在调度程序具有大量需要同时或接近同时触发的触发器的情况下，这可能很有用（出于性能考虑）。
org.quartz.scheduler.batchTriggerAcquisitionFireAheadTimeWindow=0
# END 主配置

org.quartz.threadPool.threadCount=10

# JDBC配置
#org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
#org.quartz.jobStore.dataSource=MCDS
#org.quartz.dataSource.MCDS.driver=com.mysql.cj.jdbc.Driver
#org.quartz.dataSource.MCDS.URL=jdbc:mysql://localhost:3306/fairchild?useSSL=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
#org.quartz.dataSource.MCDS.user=root
#org.quartz.dataSource.MCDS.password=123456
#org.quartz.dataSource.MCDS.maxConnections=30
# JDBC配置